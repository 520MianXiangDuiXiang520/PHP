trim
(PHP 4, PHP 5, PHP 7)

trim — 去除字符串首尾处的空白字符（或者其他字符）

说明 ¶
string trim ( string $str [, string $character_mask = " \t\n\r\0\x0B" ] )
此函数返回字符串 str 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符：

" " (ASCII 32 (0x20))，普通空格符。
"\t" (ASCII 9 (0x09))，制表符。
"\n" (ASCII 10 (0x0A))，换行符。
"\r" (ASCII 13 (0x0D))，回车符。
"\0" (ASCII 0 (0x00))，空字节符。
"\x0B" (ASCII 11 (0x0B))，垂直制表符。
参数 ¶
str
待处理的字符串。

character_mask
可选参数，过滤字符也可由 character_mask 参数指定。一般要列出所有希望过滤的字符，也可以使用 “..” 列出一个字符范围。

返回值 ¶
过滤后的字符串。
*************************************************************************************************************************************************************************************
ltrim(rtrim)
(PHP 4, PHP 5, PHP 7)

ltrim(rtrim) — 删除字符串开头(结尾)的空白字符（或其他字符）

说明 ¶
string ltrim(rtrim) ( string $str [, string $character_mask ] )
删除字符串开头（结尾）的空白字符（或其他字符）

参数 ¶
str
输入的字符串。

character_mask
通过参数 character_mask，你也可以指定想要删除的字符，简单地列出你想要删除的所有字符即可。使用..，可以指定字符的范围。

返回值 ¶
该函数返回一个删除了 str 最左边的空白字符的字符串。 如果不使用第二个参数， ltrim()(rtrim()) 仅删除以下字符：

" " (ASCII 32 (0x20))，普通空白字符。
"\t" (ASCII 9 (0x09))， 制表符.
"\n" (ASCII 10 (0x0A))，换行符。
"\r" (ASCII 13 (0x0D))，回车符。
"\0" (ASCII 0 (0x00))， NUL空字节符。
"\x0B" (ASCII 11 (0x0B))，垂直制表符。
*************************************************************************************************************************************************************************************
addslashes
(PHP 4, PHP 5, PHP 7)

addslashes — 使用反斜线引用字符串

说明 ¶
string addslashes ( string $str )
返回字符串，该字符串为了数据库查询语句等的需要在某些字符前加上了反斜线。这些字符是单引号（'）、双引号（"）、反斜线（\）与 NUL（NULL 字符）。

一个使用 addslashes() 的例子是当你要往数据库中输入数据时。 例如，将名字 O'reilly 插入到数据库中，这就需要对其进行转义。
 强烈建议使用 DBMS 指定的转义函数 （比如 MySQL 是 mysqli_real_escape_string()，PostgreSQL 是 pg_escape_string()），
 但是如果你使用的 DBMS 没有一个转义函数，并且使用 \ 来转义特殊字符，你可以使用这个函数。
  仅仅是为了获取插入数据库的数据，额外的 \ 并不会插入。
   当 PHP 指令 magic_quotes_sybase 被设置成 on 时，意味着插入 ' 时将使用 ' 进行转义。

PHP 5.4 之前 PHP 指令 magic_quotes_gpc 默认是 on， 实际上所有的 GET、POST 和 COOKIE 数据都用被 addslashes() 了。
不要对已经被 magic_quotes_gpc 转义过的字符串使用 addslashes()，因为这样会导致双层转义。 遇到这种情况时可以使用函数 get_magic_quotes_gpc() 进行检测。

参数 ¶
str
要转义的字符。

返回值 ¶
返回转义后的字符。
*************************************************************************************************************************************************************************************
mysqli::real_escape_string
mysqli::escape_string
mysqli_real_escape_string
(PHP 5, PHP 7)

mysqli::real_escape_string -- mysqli::escape_string -- mysqli_real_escape_string — 根据当前连接的字符集，对于 SQL 语句中的特殊字符进行转义

说明 ¶
面向对象风格

string mysqli::escape_string ( string $escapestr )
string mysqli::real_escape_string ( string $escapestr )
过程化风格

string mysqli_real_escape_string ( mysqli $link , string $escapestr )
此函数用来对字符串中的特殊字符进行转义， 以使得这个字符串是一个合法的 SQL 语句。 传入的字符串会根据当前连接的字符集进行转义，得到一个编码后的合法的 SQL 语句。

Caution
安全：默认字符集
在调用 mysqli_real_escape_string() 函数之前， 必须先通过调用 mysqli_set_charset() 函数或者在 MySQL 服务器端设置字符集。 更多信息请参考 字符集。

参数 ¶
link
仅以过程化样式：由mysqli_connect() 或 mysqli_init() 返回的链接标识。

escapestr
需要进行转义的字符串。

会被进行转义的字符包括： NUL （ASCII 0），\n，\r，\，'，" 和 Control-Z.

返回值 ¶
转义后的字符串。

错误／异常 ¶
在无效的连接上调用此函数会返回 NULL 并发出一个 E_WARNING 级别的错误。
*************************************************************************************************************************************************************************************
addcslashes
(PHP 4, PHP 5, PHP 7)

addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符

说明 ¶
string addcslashes ( string $str , string $charlist )
返回字符串，该字符串在属于参数 charlist 列表中的字符前都加上了反斜线。

参数 ¶
str
要转义的字符。

charlist
如果 charlist 中包含有 \n，\r 等字符，将以 C 语言风格转换，而其它非字母数字且 ASCII 码低于 32 以及高于 126 的字符均转换成使用八进制表示。

当定义 charlist 参数中的字符序列时，需要确实知道介于自己设置的开始及结束范围之内的都是些什么字符。

<?php
echo addcslashes('foo[ ]', 'A..z');
// 输出：\f\o\o\[ \]
// 所有大小写字母均被转义
// ... 但 [\]^_` 以及分隔符、换行符、回车符等也一并被转义了。
?>
另外，如果设置范围中的结束字符 ASCII 码高于开始字符，则不会创建范围，只是将开始字符、结束字符以及其间的字符逐个转义。可使用 ord() 函数获取字符的 ASCII 码值。
<?php
echo addcslashes("zoo['.']", 'z..A');
// 输出：\zoo['\.']
?>
当选择对字符 0，a，b，f，n，r，t 和 v 进行转义时需要小心，它们将被转换成 \0，\a，\b，\f，\n，\r，\t 和 \v。在 PHP 中，只有 \0（NULL），\r（回车符），\n（换行符）和 \t（制表符）是预定义的转义序列， 而在 C 语言中，上述的所有转换后的字符都是预定义的转义序列。

返回值 ¶
返回转义后的字符。

*************************************************************************************************************************************************************************************






*************************************************************************************************************************************************************************************




*************************************************************************************************************************************************************************************








*************************************************************************************************************************************************************************************